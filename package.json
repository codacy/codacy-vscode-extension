{
  "name": "codacy",
  "displayName": "Codacy",
  "description": "Official Codacy extension for Visual Studio Code",
  "icon": "resources/icons/extension-logo.png",
  "version": "0.0.1",
  "publisher": "codacy-app",
  "repository": {
    "type": "git",
    "url": "https://github.com/codacy/codacy-vscode-extension"
  },
  "engines": {
    "vscode": "^1.81.0"
  },
  "categories": [
    "Linters",
    "AI"
  ],
  "keywords": [
    "codacy",
    "code-quality",
    "code-review",
    "security",
    "coverage",
    "complexity",
    "duplication",
    "language-model-tools"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onFileSystem:pr",
    "onFileSystem:githubpr"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "codacy-main",
          "title": "Codacy",
          "icon": "resources/icons/codacy-logo.svg"
        }
      ]
    },
    "views": {
      "codacy-main": [
        {
          "id": "codacy:status",
          "name": "Status",
          "icon": "$(library)",
          "when": "!codacy:hasProject",
          "collapsed": false
        },
        {
          "id": "codacy:cloud-status",
          "name": "Codacy Cloud",
          "icon": "$(library)",
          "when": "codacy:hasProject",
          "initialSize": 1,
          "collapsed": false
        },
        {
          "id": "codacy:prSummary",
          "name": "Pull request",
          "when": "codacy:hasProject && Codacy:CodacyCloudStateContext == Loaded && Codacy:PullRequestStateContext == Loaded",
          "icon": "$(git-pull-request)",
          "initialSize": 3
        },
        {
          "id": "codacy:pullRequests",
          "name": "Open pull requests",
          "when": "codacy:hasProject && Codacy:CodacyCloudStateContext == Loaded",
          "icon": "$(git-pull-request)",
          "initialSize": 3
        },
        {
          "id": "codacy:branchIssues",
          "name": "Issue Browser",
          "when": "codacy:hasProject && Codacy:CodacyCloudStateContext == Loaded && Codacy:BranchStateContext == OnAnalysedBranch",
          "icon": "$(bug)",
          "initialSize": 3
        },
        {
          "id": "codacy:mcp",
          "name": "AI Guardrails",
          "when": "codacy:hasProject && codacy:supportsMCP",
          "icon": "$(gear)",
          "initialSize": 2
        },
        {
          "id": "codacy:cli",
          "name": "Local Analysis",
          "when": "codacy:hasProject && ((!codacy:cliInstalled && codacy:canInstallCLI) || (codacy:windowsDetected && !codacy:canInstallCLI))",
          "icon": "$(gear)",
          "initialSize": 2
        },
        {
          "id": "codacy:support",
          "name": "Chat with us",
          "icon": "$(question)",
          "collapsed": false,
          "initialSize": 1
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "codacy:support",
        "contents": "Do you need help or do you have any questions?\n[Open support chat](https://codacy.zendesk.com/hc/en-us/requests/new)\nEnjoying the experience? Please consider [leaving a review](https://marketplace.visualstudio.com/items?itemName=codacy-app.codacy&ssr=false#review-details)"
      },
      {
        "view": "codacy:status",
        "contents": "No project is open. Open a project to use the Codacy extension."
      },
      {
        "view": "codacy:cloud-status",
        "contents": "Codacy Cloud is initializing...",
        "when": "Codacy:CodacyCloudStateContext == Initializing"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "You are not connected to Codacy. Connect to Codacy to customize your rules and scan every PR before it gets merged.\n[Connect to Codacy](command:codacy.codacyAuth)\n\nGet access to all features: coverage, DAST, SCA scanning, and more. [Learn more about Codacy](https://www.codacy.com/)",
        "when": "Codacy:CodacyCloudStateContext == NeedsAuthentication"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "This project isn't a Git repository. To connect it to Codacy, initialize a Git repository first.",
        "when": "Codacy:CodacyCloudStateContext == NoGitRepository"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "We failed to connect this repository to Codacy. Please restart the IDE and try again.",
        "when": "Codacy:CodacyCloudStateContext == NoRepository"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "You are not part of this organization in Codacy.\n[Join organization](command:codacy.joinOrganization)",
        "when": "Codacy:CodacyCloudStateContext == NeedsToJoinOrganization"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "An admin must approve your request to join the organization on Codacy.",
        "when": "Codacy:CodacyCloudStateContext == HasPendingJoinOrganization"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "This organization is not part of Codacy.\n[Add organization](command:codacy.codacyAuth)",
        "when": "Codacy:CodacyCloudStateContext == NeedsToAddOrganization"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "Ensure full protection by adding PR-level scans to this repo so that no security vulnerabilities are added.\n[Add repository to Codacy](command:codacy.addRepository)\nAdds this Git repository to Codacy with your organization default scanning rules.",
        "when": "Codacy:CodacyCloudStateContext == NeedsToAddRepository"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "First analysis is still running...",
        "when": "Codacy:CodacyCloudStateContext == IsAnalyzing"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "Analysis failed. Check [Codacy Cloud](https://app.codacy.com/repositories) for more details.",
        "when": "Codacy:CodacyCloudStateContext == AnalysisFailed"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "Fine-tune your configuration to get the most out of Codacy.\n[Improve your Codacy Setup](command:codacy.onboarding.complete)",
        "when": "Codacy:CodacyCloudStateContext == Loaded && codacy:onboardingSkipped"
      },
      {
        "view": "codacy:cloud-status",
        "contents": "No open pull request found.\n[Try again](command:codacy.pr.load)",
        "when": "Codacy:CodacyCloudStateContext == Loaded && Codacy:PullRequestStateContext == NoPullRequest"
      },
      {
        "view": "codacy:mcp",
        "contents": "Control your AI generated code with [Codacy Guardrails](https://www.codacy.com/guardrails/).\n[Install Guardrails](command:codacy.configureGuardrails)\n\nGets everything set up by installing Codacy CLI, setting up Codacy MCP Server, and adding the necessary agent rules files.\n\nYou can also choose to [only install the MCP Server](command:codacy.configureMCP)",
        "when": "codacy:supportsMCP && !codacy:mcpConfigured && !codacy:cliInstalled && codacy:canInstallCLI && !codacy:cliInstalling"
      },
      {
        "view": "codacy:mcp",
        "contents": "Set up Codacy MCP Server to get access to Codacy information from your agent.\n[Install MCP Server](command:codacy.configureMCP)\n\nTo control your AI generated code with [Codacy Guardrails](https://www.codacy.com/guardrails/), you need to be able to install the Codacy CLI (macOS, Linus, or Windows via WSL).",
        "when": "codacy:supportsMCP && !codacy:mcpConfigured && !codacy:canInstallCLI"
      },
      {
        "view": "codacy:mcp",
        "contents": "Control your AI generated code with [Codacy Guardrails](https://www.codacy.com/guardrails/). Install the missing components to get started.",
        "when": "(codacy:supportsMCP && !codacy:mcpConfigured && codacy:cliInstalled) || (!codacy:cliInstalled && codacy:canInstallCLI && !codacy:cliInstalling && codacy:mcpConfigured)"
      },
      {
        "view": "codacy:mcp",
        "contents": "Control your AI generated code with [Codacy Guardrails](https://www.codacy.com/guardrails/).",
        "when": "codacy:supportsMCP && codacy:mcpConfigured && codacy:canInstallCLI && codacy:cliInstalled"
      },
      {
        "view": "codacy:mcp",
        "contents": "$(check) Codacy MCP Server is set up. [Reset MCP Server](command:codacy.configureMCP.reset)",
        "when": "codacy:supportsMCP && codacy:mcpConfigured"
      },
      {
        "view": "codacy:mcp",
        "contents": "$(warning) MCP Server not found. [Install MCP Server](command:codacy.configureMCP)",
        "when": "codacy:supportsMCP && !codacy:mcpConfigured && codacy:cliInstalled && !codacy:cliInstalling"
      },
      {
        "view": "codacy:mcp",
        "contents": "$(check) Codacy CLI is installed. [Go to settings](command:workbench.action.openSettings?%22@ext:codacy-app.codacy%20cli%22).",
        "when": "codacy:canInstallCLI && codacy:cliInstalled"
      },
      {
        "view": "codacy:mcp",
        "contents": "$(warning) Codacy CLI not found. [Install CLI](command:codacy.installCLI)",
        "when": "codacy:supportsMCP && codacy:mcpConfigured && !codacy:cliInstalled && codacy:canInstallCLI && !codacy:cliInstalling"
      },
      {
        "view": "codacy:mcp",
        "contents": "[Learn more](https://docs.codacy.com/codacy-guardrails/codacy-guardrails-getting-started/) about Codacy Guardrails in our documentation."
      },
      {
        "view": "codacy:cli",
        "contents": "Install Codacy CLI to analyze your code locally and get instant feedback as you type.\n[Install Codacy CLI](command:codacy.installCLI)\n\nSets everything up in your IDE so you're ready to go, including any dependencies you need (like Node, Python, or Java). Customize how it works in the [extension settings](command:workbench.action.openSettings?%22@ext:codacy-app.codacy%20cli%22).",
        "when": "!codacy:cliInstalled && codacy:canInstallCLI && !codacy:cliInstalling"
      },
      {
        "view": "codacy:cli",
        "contents": "Codacy CLI is only available on Windows via [WSL](https://learn.microsoft.com/en-us/windows/wsl/install).",
        "when": "codacy:windowsDetected && !codacy:canInstallCLI"
      },
      {
        "view": "codacy:cli",
        "contents": "$(loading~spin) Installing Codacy CLI...",
        "when": "!codacy:cliInstalled && codacy:canInstallCLI && codacy:cliInstalling"
      }
    ],
    "commands": [
      {
        "command": "codacy.codacyAuth",
        "title": "Connect to Codacy",
        "category": "Codacy commands",
        "when": "Codacy:CodacyCloudStateContext == NeedsAuthentication"
      },
      {
        "command": "codacy.signOut",
        "title": "Sign out from Codacy",
        "category": "Codacy commands",
        "when": "Codacy:CodacyCloudStateContext != NeedsAuthentication"
      },
      {
        "command": "codacy.refresh",
        "title": "Refresh",
        "category": "Codacy commands",
        "icon": "$(sync)",
        "when": "Codacy:CodacyCloudStateContext != Initializing"
      },
      {
        "command": "codacy.pr.load",
        "title": "Look for Pull Request",
        "category": "Codacy commands",
        "icon": "$(sync)",
        "when": "Codacy:CodacyCloudStateContext == Loaded"
      },
      {
        "command": "codacy.pr.refresh",
        "title": "Refresh Pull Request",
        "category": "Codacy commands",
        "icon": "$(refresh)",
        "when": "Codacy:PullRequestStateContext == Loaded"
      },
      {
        "command": "codacy.pullRequests.refresh",
        "title": "Refresh Pull Requests",
        "category": "Codacy commands",
        "icon": "$(refresh)",
        "when": "Codacy:CodacyCloudStateContext == Loaded"
      },
      {
        "command": "codacy.branchIssues.refresh",
        "title": "Refresh Branch Issues",
        "category": "Codacy commands",
        "icon": "$(refresh)",
        "when": "Codacy:CodacyCloudStateContext == Loaded && Codacy:PullRequestStateContext == NoPullRequest"
      },
      {
        "command": "codacy.pr.openSummary",
        "title": "Open Pull Request Summary",
        "category": "Codacy commands",
        "when": "Codacy:PullRequestStateContext == Loaded"
      },
      {
        "command": "codacy.pr.checkout",
        "title": "Checkout Pull Request",
        "category": "Codacy commands",
        "icon": "$(arrow-right)"
      },
      {
        "command": "codacy.pr.toggleCoverage",
        "title": "Toggle inline coverage",
        "category": "Codacy commands",
        "icon": "resources/icons/coverage-inline-on.png"
      },
      {
        "command": "codacy.pullRequests.open",
        "title": "Open Pull Requests",
        "category": "Codacy commands",
        "when": "Codacy:CodacyCloudStateContext == Loaded"
      },
      {
        "command": "codacy.branchIssues.open",
        "title": "Open Issues",
        "category": "Codacy commands",
        "when": "Codacy:CodacyCloudStateContext == Loaded && Codacy:PullRequestStateContext == NoPullRequest"
      },
      {
        "command": "codacy.issue.seeDetails",
        "title": "See issue details",
        "category": "Codacy commands"
      },
      {
        "command": "codacy.configureMCP",
        "title": "Configure Codacy MCP Server",
        "category": "Codacy commands",
        "when": "codacy:supportsMCP && !codacy:mcpConfigured"
      },
      {
        "command": "codacy.configureMCP.reset",
        "title": "Reset Codacy MCP Server",
        "category": "Codacy commands",
        "when": "codacy:supportsMCP && codacy:mcpConfigured"
      },
      {
        "command": "codacy.installCLI",
        "title": "Install Codacy CLI",
        "category": "Codacy commands",
        "when": "!codacy:cliInstalled && codacy:canInstallCLI"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "codacy.refresh",
          "when": "Codacy:CodacyCloudStateContext != Initializing"
        },
        {
          "command": "codacy.pr.load",
          "when": "Codacy:CodacyCloudStateContext == Loaded"
        },
        {
          "command": "codacy.pr.refresh",
          "when": "Codacy:PullRequestStateContext == Loaded"
        },
        {
          "command": "codacy.pr.checkout",
          "when": "false"
        },
        {
          "command": "codacy.configureMCP",
          "when": "codacy:supportsMCP && !codacy:mcpConfigured"
        },
        {
          "command": "codacy.configureMCP.reset",
          "when": "codacy:supportsMCP && codacy:mcpConfigured"
        },
        {
          "command": "codacy.installCLI",
          "when": "!codacy:cliInstalled && codacy:canInstallCLI"
        }
      ],
      "view/title": [
        {
          "command": "codacy.refresh",
          "when": "view == codacy:cloud-status",
          "group": "navigation"
        },
        {
          "command": "codacy.pr.refresh",
          "when": "view == codacy:prSummary",
          "group": "navigation"
        },
        {
          "command": "codacy.pullRequests.refresh",
          "when": "view == codacy:pullRequests",
          "group": "navigation"
        },
        {
          "command": "codacy.branchIssues.refresh",
          "when": "view == codacy:branchIssues",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "codacy.pr.checkout",
          "when": "view == codacy:pullRequests && viewItem =~ /pullRequest/",
          "group": "pullRequest@1"
        },
        {
          "command": "codacy.pr.checkout",
          "when": "view == codacy:pullRequests && viewItem =~ /pullRequest/",
          "group": "inline"
        },
        {
          "command": "codacy.pr.toggleCoverage",
          "when": "view == codacy:prSummary && viewItem =~ /toggleCoverage/ ",
          "group": "inline"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Codacy",
      "properties": {
        "codacy.guardrails.analyzeGeneratedCode": {
          "type": "string",
          "title": "Automatically analyze generated code with Codacy Guardrails",
          "description": "This feature ensures that your generated code is analyzed by Codacy Guardrails.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "default": "enabled"
        },
        "codacy.guardrails.rulesFile": {
          "type": "string",
          "title": "Generate rules file for the AI Agent",
          "description": "Allow the extension to generate Codacy specific rules for the AI Agent. Disabling this option will impact the user experience of Codacy Guardrails.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "default": "enabled"
        },
        "codacy.cli.cliVersion": {
          "type": "string",
          "markdownDescription": "The version of the Codacy CLI to use. Check available versions [here](https://github.com/codacy/codacy-cli-v2/releases)"
        },
        "codacy.cli.analysisMode": {
          "type": "string",
          "title": "Local code analysis",
          "description": "This feature allows you to analyze your code locally using the Codacy CLI.",
          "enum": [
            "enabled",
            "only on saved files",
            "disabled"
          ],
          "default": "enabled"
        }
      }
    },
    "permissions": [
      "git"
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "compile-tests": "tsc -p . --outDir out",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "package-visx": "vsce package --out releases",
    "lint": "eslint src --ext ts",
    "pretest": "npm run compile-tests && npm run lint",
    "test": "node ./out/test/runTest.js",
    "test:coverage": "c8 npm run test",
    "fetch-api": "curl https://artifacts.codacy.com/api/codacy-api/49.27.0/apiv3-bundled.yaml -o ./api-v3/api-swagger.yaml --create-dirs",
    "generate-api": "rm -rf ./src/api/client && openapi --input ./api-v3/api-swagger.yaml --output ./src/api/client --useUnionTypes --indent 2 --client axios",
    "update-api": "npm run fetch-api && npm run generate-api",
    "postinstall": "npm run update-api",
    "check-types": "tsc --noEmit"
  },
  "devDependencies": {
    "@codacy/openapi-typescript-codegen": "^0.0.2",
    "@types/glob": "^8.1.0",
    "@types/lodash": "^4.14.196",
    "@types/mocha": "^10.0.1",
    "@types/node": "20.4.7",
    "@types/sarif": "2.1.7",
    "@types/sinon": "^10.0.16",
    "@types/temp": "^0.9.1",
    "@types/vscode": "^1.81.0",
    "@typescript-eslint/eslint-plugin": "^6.2.1",
    "@typescript-eslint/parser": "^6.2.1",
    "@vscode/test-electron": "^2.3.4",
    "@vscode/vsce": "^2.20.1",
    "c8": "^8.0.1",
    "eslint": "^8.46.0",
    "eslint-config-prettier": "^8.10.0",
    "glob": "^10.3.3",
    "mocha": "^10.2.0",
    "prettier": "^3.0.1",
    "remark": "^14.0.3",
    "sinon": "^15.2.0",
    "temp": "^0.9.4",
    "ts-loader": "^9.4.3",
    "typescript": "^5.1.6",
    "webpack": "^5.94.0",
    "webpack-cli": "^5.1.1"
  },
  "dependencies": {
    "@segment/analytics-node": "^1.1.3",
    "@types/uuid": "^10.0.0",
    "axios": "^1.7.4",
    "date-fns": "^2.30.0",
    "form-data": "^4.0.0",
    "lodash": "^4.17.21",
    "uuid": "^11.1.0"
  }
}
